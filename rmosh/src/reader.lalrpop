use std::str::FromStr;
use crate::objects::Object;
use crate::gc::Gc;

grammar(gc: &mut Box<Gc>);

//Num: i32 = <s:r"[0-9]+"> => i32::from_str(s).unwrap();

// R7RS small 7.1.2. External representations
pub Datum: Object = {
    SimpleDatum,
}

SimpleDatum: Object = {
    Boolean,
    Symbol,
}

Symbol: Object = {
    <Identifier>
}


// R7RS small 7.1.1. Lexical structure.

Identifier: Object = {
    <i:Initial> <s:Subsequent *>  => gc.symbol_intern(&(i + &s.join(""))),   
}

Initial: String = {
    <Letter>,
    <SpecialInitial>,
}

Letter: String = {
    r"[[:alpha:]]" => <>.to_string()
}

SpecialInitial: String = {
    r"[!$%&*/:<=>?~^_]" => <>.to_string()
}

Subsequent: String = {
    <Letter>
}

Boolean: Object = {
    "#t" => Object::True,
    "#true" => Object::True,
    "#f" => Object::False,
    "#false" => Object::False,
}

