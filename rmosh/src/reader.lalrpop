use std::str::FromStr;
use crate::objects::Float;
use crate::objects::Object;
use crate::gc::Gc;
use crate::lexer;

grammar(gc: &mut Box<Gc>);

// R7RS small 7.1.2. External representations
pub Datum: Object = {
    SimpleDatum,
    CompoundDataum,
    "#;" Datum <datum: Datum> => datum,
}

CompoundDataum: Object = {
    List,
    Vector,
    Abbreviation,
}

SimpleDatum: Object = {
    Boolean,
    ByteVector,
    Character,
    Number,
    Regexp,
    String,
    Symbol,
}

List: Object = {
    "(" <objects: Datum *> ")" => gc.listn(&objects),
    "(" <objects: Datum *> "#;" Datum ")" => gc.listn(&objects),
    // TODO: There should be a better way to skip datum comment.    
    "(" <objects: Datum *> "#;" Datum "#;" Datum ")" => gc.listn(&objects),  
    "(" <objects: Datum *> "#;" Datum "#;" Datum "#;" Datum ")" => gc.listn(&objects),        
    "(" <objects: Datum +> "." <last: Datum> ")" => {
        gc.dot_pair(&objects, last)
    }
}

ByteVector: Object = {
    "#u8(" <objects: Datum *> ")" => gc.new_bytevector(&objects),
}

Vector: Object = {
    "#(" <objects: Datum *> ")" => gc.new_vector(&objects),
}

Abbreviation: Object = {
    "'" <datum: Datum> => {
        let quote = gc.symbol_intern("quote");
        gc.list2(quote, datum)
    },
    "`" <datum: Datum> => {
        let quote = gc.symbol_intern("quasiquote");
        gc.list2(quote, datum)
    },
    "," <datum: Datum> => {
        let quote = gc.symbol_intern("unquote");
        gc.list2(quote, datum)
    },
    "@" <datum: Datum> => {
        let quote = gc.symbol_intern("unquotesplicing");
        gc.list2(quote, datum)
    },
    "#'" <datum: Datum> => {
        let quote = gc.symbol_intern("syntax");
        gc.list2(quote, datum)
    },
    "#`" <datum: Datum> => {
        let quote = gc.symbol_intern("quasisyntax");
        gc.list2(quote, datum)
    },
    "#," <datum: Datum> => {
        let quote = gc.symbol_intern("unsyntax");
        gc.list2(quote, datum)
    },
    "#@" <datum: Datum> => {
        let quote = gc.symbol_intern("unsyntaxsplicing");
        gc.list2(quote, datum)
    },
}

Regexp: Object = {
    // todo
    "regexp" => gc.new_string(&<>),
}


String: Object = {
    "string" => gc.new_string(&<>),
}

Character: Object = {
    "character" => Object::Char(<>),
}


Symbol: Object = {
    "identifier" => gc.symbol_intern(&<>),
}

Number: Object = {
    <s: "number10"> => {
        match isize::from_str(&s) {
            Ok(n) => Object::Number(n),
            Err(e) => {
                match f64::from_str(&s) {
                    Ok(value) => Object::Float(Float::new(value)),
                    Err(e2) => {
                        panic!("Number parse error: {}{} in <{}>", e, e2, s)
                    }
                }
            }
        }
    }
}

Boolean: Object = {
    "true" => Object::True,
    "false" => Object::False,
}

extern {
    type Location = usize;
    type Error = lexer::LexicalError;

    enum lexer::Token {
        "'" => lexer::Token::AbbrevQuote,
        "`" => lexer::Token::AbbrevQuasiquote,
        "," => lexer::Token::AbbrevUnquote,
        "@" => lexer::Token::AbbrevUnquoteSplicing,
        "#'" => lexer::Token::AbbrevSyntax,
        "#`" => lexer::Token::AbbrevQuasisyntax,
        "#," => lexer::Token::AbbrevUnsyntax,
        "#@" => lexer::Token::AbbrevUnsyntaxSplicing,
        "#;" => lexer::Token::DatumComment,
        "#u8(" => lexer::Token::ByteVectorStart,
        "." => lexer::Token::Dot,
        "true" => lexer::Token::True,
        "false" => lexer::Token::False,
        "(" => lexer::Token::LeftParen,
        ")" => lexer::Token::RightParen,
        ")" => lexer::Token::RightParen,
        "#(" => lexer::Token::VectorStart,
        "character" => lexer::Token::Character { value: <char> },
        "identifier" => lexer::Token::Identifier { value: <String> },
        "number10" => lexer::Token::Number10 { value: <String> },
        "regexp" => lexer::Token::Regexp { value: <String> },
        "string" => lexer::Token::String { value: <String> },
    }
}