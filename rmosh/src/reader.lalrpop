use std::str::FromStr;
use crate::objects::Object;
use crate::gc::Gc;
use crate::lexer;

grammar(gc: &mut Box<Gc>);

// R7RS small 7.1.2. External representations
pub Datum: Object = {
    SimpleDatum,
    CompoundDataum,
}

CompoundDataum: Object = {
    List,
}

SimpleDatum: Object = {
    Boolean,
    Number,
    String,
    Symbol,
}

List: Object = {
    "token:(" <objects: Datum *> "token:)" => gc.listn(&objects),
}

String: Object = {
    "token:string" => gc.new_string(&<>),  
}

Symbol: Object = {
    "token:identifier" => gc.symbol_intern(&<>),  
}

Number: Object = {
    <s: "token:number10"> => {
        match isize::from_str(&s) {
            Ok(n) => Object::Number(n),
            Err(e) => panic!("Number parse error: {} in <{}>", e, s),
        }
    }
}

Boolean: Object = {
    "token:true" => Object::True,
    "token:false" => Object::False,   
}

extern {
    type Location = usize;
    type Error = lexer::LexicalError;

    enum lexer::Token {
        "token:true" => lexer::Token::True,
        "token:false" => lexer::Token::False,      
        "token:(" => lexer::Token::LeftParen,
        "token:)" => lexer::Token::RightParen,          
        "token:identifier" => lexer::Token::Identifier {value: <String> },
        "token:number10" => lexer::Token::Number10 {value: <String> },
        "token:string" => lexer::Token::String {value: <String> },
    }
}