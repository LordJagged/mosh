use crate::gc::Gc;
use crate::lexer;
use crate::numbers::exact;
use crate::numbers::inexact;
use crate::numbers::Bignum;
use crate::numbers::Compnum;
use crate::numbers::Flonum;
use crate::numbers::Ratnum;
use crate::ports;
use crate::ports::ReadError;
use crate::objects::Object;
use std::str::FromStr;
use num_bigint::BigInt;
use num_traits::Num;
use lalrpop_util::ParseError;

grammar(gc: &mut Box<Gc>);

// R7RS small 7.1.2. External representations
pub Number: Object = {
    Number10,
    Number8,
    Number16,
}

Number10: Object = {
    <e: Prefix10?> <c: Complex10> => {
        match e {
            Some(Some(is_exact)) => {
                if is_exact {
                    exact(gc, c)
                } else {
                    inexact(gc, c)
                }
            },
            Some(None) | None => {
                c
            },
        }
    },
}

Number16: Object = {
    <e: Prefix16> <c: Complex16> => {
        match e {
            Some(is_exact) => {
                if is_exact {
                    exact(gc, c)
                } else {
                    inexact(gc, c)
                }
            },
            None => {
                c
            }
        }
    }
}

Number8: Object = {
    <e: Prefix8> <c: Complex8> => {
        match e {
            Some(is_exact) => {
                if is_exact {
                    exact(gc, c)
                } else {
                    inexact(gc, c)
                }
            },
            None => {
                c
            }
        }
    }
}

Prefix10: Option<bool> = {
    Radix10 <e: Exactness> => Some(e),
    <e: Exactness> Radix10 => Some(e),
    Radix10 => None,
    <e: Exactness> => Some(e),
}

Prefix8: Option<bool> = {
    Radix8 <e: Exactness?> => {
        match e {
            Some(is_exact) => Some(is_exact),
            None => None,
        }
    },
    <is_exact: Exactness> Radix8 => Some(is_exact),
}

Prefix16: Option<bool> = {
    Radix16 <e: Exactness?> => {
        match e {
            Some(is_exact) => Some(is_exact),
            None => None,
        }
    },
    <is_exact: Exactness> Radix16 => Some(is_exact),
}

Exactness: bool = {
    "#e" => true,
    "#i" => false,
}

Radix10 = {
    "#d"
}

Radix8 = {
    "#o"
}

Radix16 = {
    "#x"
}

Complex10: Object = {
    Real10,
    <real: Real10> "+" <imag: UReal10> "i" => {
        Object::Compnum(gc.alloc(Compnum::new(real, imag)))
    },
    <real: Real10> "-" <imag: UReal10> "i" => {
        let imag = imag.neg(gc);
        Object::Compnum(gc.alloc(Compnum::new(real, imag)))
    },
    <real: Real10> "+" "i" => {
        Object::Compnum(gc.alloc(Compnum::new(real, Object::Fixnum(1))))
    },
    <real: Real10> "+inf.0" "i" => {
        Object::Compnum(gc.alloc(Compnum::new(real, Object::Flonum(Flonum::new(f64:: INFINITY)))))
    },
    <real: Real10> "-inf.0" "i" => {
        Object::Compnum(gc.alloc(Compnum::new(real, Object::Flonum(Flonum::new(f64:: NEG_INFINITY)))))
    },    
    <real: Real10> "-" "i" => {
        Object::Compnum(gc.alloc(Compnum::new(real, Object::Fixnum(-1))))
    },
    "+" <real: Real10> "i" => {
        Object::Compnum(gc.alloc(Compnum::new(Object::Fixnum(0), real)))
    },
    "-" <real: Real10> "i" => {
        Object::Compnum(gc.alloc(Compnum::new(Object::Fixnum(0), real)))
    },    
    "+" "i" => {
        Object::Compnum(gc.alloc(Compnum::new(Object::Fixnum(0), Object::Fixnum(1))))
    },
    "-" "i" => {
        Object::Compnum(gc.alloc(Compnum::new(Object::Fixnum(0), Object::Fixnum(1))))
    },
}

Complex8: Object = {
    Real8,
    <real: Real8> "+" <imag: UReal8> "i" => {
        Object::Compnum(gc.alloc(Compnum::new(real, imag)))
    },
    <real: Real8> "-" <imag: UReal8> "i" => {
        let imag = imag.neg(gc);
        Object::Compnum(gc.alloc(Compnum::new(real, imag)))
    },
    <real: Real8> "+" "i" => {
        Object::Compnum(gc.alloc(Compnum::new(real, Object::Fixnum(1))))
    },
    <real: Real8> "+inf.0" "i" => {
        Object::Compnum(gc.alloc(Compnum::new(real, Object::Flonum(Flonum::new(f64:: INFINITY)))))
    },
    <real: Real8> "-" "i" => {
        Object::Compnum(gc.alloc(Compnum::new(real, Object::Fixnum(-1))))
    },
}

Complex16: Object = {
    Real16,
    <real: Real16> "+" <imag: UReal16> "i" => {
        Object::Compnum(gc.alloc(Compnum::new(real, imag)))
    },
    <real: Real16> "-" <imag: UReal16> "i" => {
        let imag = imag.neg(gc);
        Object::Compnum(gc.alloc(Compnum::new(real, imag)))
    },
    <real: Real16> "+" "i" => {
        Object::Compnum(gc.alloc(Compnum::new(real, Object::Fixnum(1))))
    },
    <real: Real16> "+inf.0" "i" => {
        Object::Compnum(gc.alloc(Compnum::new(real, Object::Flonum(Flonum::new(f64:: INFINITY)))))
    },
    <real: Real16> "-" "i" => {
        Object::Compnum(gc.alloc(Compnum::new(real, Object::Fixnum(-1))))
    },
}

Real10: Object = {
    UReal10,
    "+" <ureal10: UReal10> => {
        ureal10
    },
    "-" <ureal10: UReal10> => {
        ureal10.neg(gc)
    },
    InfNan,
}

Real8: Object = {
    UReal8,
    "+" <ureal8: UReal8> => {
        ureal8
    },
    "-" <ureal8: UReal8> => {
        ureal8.neg(gc)
    },
}

Real16: Object = {
    UReal16,
    "+" <ureal16: UReal16> => {
        ureal16
    },
    "-" <ureal16: UReal16> => {
        ureal16.neg(gc)
    },
}

UReal10: Object = {
    UInteger10 =>? {
        match isize::from_str(&<>) {
            Ok(n) => {
                Ok(Object::Fixnum(n))
            }
            Err(err) => {
                match BigInt::from_str(&<>) {
                    Ok(b) => {
                        Ok(Object::Bignum(gc.alloc(Bignum::new(b))))
                    },
                    Err(err2) => {
                        Err(ParseError::User {
                            error: ReadError::NumberParseError { token: <>, description: err2.to_string() }
                        })
                    }
                }
            }
        }
    },
    <numer: UInteger10> "/" <denom: UInteger10> =>? {
        match (isize::from_str(&numer), isize::from_str(&denom)) {
            (Ok(n), Ok(d)) => {
                Ok(Object::Ratnum(gc.alloc(Ratnum::new(n, d))))
            }
            (Err(err), _) => {
                Err(ParseError::User {
                    error: ReadError::NumberParseError { token: numer, description: err.to_string() }
                })
            }
            (_, Err(err)) => {
                Err(ParseError::User {
                    error: ReadError::NumberParseError { token: denom, description: err.to_string() }
                })
            }
        }
    },
    Decimal10 =>? {
        match f64::from_str(&<>) {
            Ok(n) => {
                Ok(Object::Flonum(Flonum::new(n)))
            },
            Err(err) => {
                Err(ParseError::User {
                    error: ReadError::NumberParseError { token: <>, description: err.to_string() }
                })
            }
        }
    }
}

UReal16: Object = {
    UInteger16 =>? {
        match isize::from_str_radix(&<>, 16) {
            Ok(n) => {
                Ok(Object::Fixnum(n))
            }
            Err(err) => {
                match BigInt::from_str_radix(&<>, 16) {
                    Ok(b) => {
                        Ok(Object::Bignum(gc.alloc(Bignum::new(b))))
                    },
                    Err(err2) => {
                        Err(ParseError::User {
                            error: ReadError::NumberParseError { token: <>, description: err2.to_string() }
                        })
                    }
                }
            }
        }
    },
    <numer: UInteger16> "/" <denom: UInteger16> =>? {
        match (isize::from_str_radix(&numer, 16), isize::from_str_radix(&denom, 16)) {
            (Ok(n), Ok(d)) => {
                Ok(Object::Ratnum(gc.alloc(Ratnum::new(n, d))))
            }
            (Err(err), _) => {
                Err(ParseError::User {
                    error: ReadError::NumberParseError { token: numer, description: err.to_string() }
                })
            }
            (_, Err(err)) => {
                Err(ParseError::User {
                    error: ReadError::NumberParseError { token: denom, description: err.to_string() }
                })
            }
        }
    },
}

UReal8: Object = {
    UInteger8 =>? {
        match isize::from_str_radix(&<>, 8) {
            Ok(n) => {
                Ok(Object::Fixnum(n))
            }
            Err(err) => {
                match BigInt::from_str_radix(&<>, 8) {
                    Ok(b) => {
                        Ok(Object::Bignum(gc.alloc(Bignum::new(b))))
                    },
                    Err(err2) => {
                        Err(ParseError::User {
                            error: ReadError::NumberParseError { token: <>, description: err2.to_string() }
                        })
                    }
                }
            }
        }
    },
    <numer: UInteger8> "/" <denom: UInteger8> =>? {
        match (isize::from_str_radix(&numer, 8), isize::from_str_radix(&denom, 8)) {
            (Ok(n), Ok(d)) => {
                Ok(Object::Ratnum(gc.alloc(Ratnum::new(n, d))))
            }
            (Err(err), _) => {
                Err(ParseError::User {
                    error: ReadError::NumberParseError { token: numer, description: err.to_string() }
                })
            }
            (_, Err(err)) => {
                Err(ParseError::User {
                    error: ReadError::NumberParseError { token: denom, description: err.to_string() }
                })
            }
        }
    },
}

Decimal10: String = {
    <uinteger10: UInteger10> <suffix: Suffix> => {
        uinteger10 + &suffix
    },
    "." <digits:  Digit10 +> <suffix: Suffix ?> => {
        ".".to_owned() + &digits.join("") + &suffix.unwrap_or("".to_string())
    },
    <digits:  Digit10 +> "." <digits2:  Digit10 *> <suffix: Suffix ?> => {
        digits.join("") + &"." + &digits2.join("") + &suffix.unwrap_or("".to_string())
    },
}

Suffix: String = {
    "e" "+" <digits:  Digit10 +> => {
        "e+".to_owned() + &digits.join("")
    },
    "e" "-" <digits:  Digit10 +> => {
        "e-".to_owned() + &digits.join("")
    },
    "e" <digits:  Digit10 +> => {
        "e".to_owned() + &digits.join("")
    },
}

UInteger10: String = {
    <digits: Digit10 +> => {
        digits.join("")
    }
}

UInteger8: String = {
    <digits: Digit8 +> => {
        digits.join("")
    },
    // hack to recognize #o1000.
    <digits: Digit10 +> => {
        digits.join("")
    }    
}

UInteger16: String = {
    <digits: Digit16 +> => {
        digits.join("")
    },
    // hack to recognize #x1000.
    <digits: Digit10 +> => {
        digits.join("")
    }
}

InfNan: Object = {
    "+inf.0" => {
        Object::Flonum(Flonum::new(f64:: INFINITY))
    },
    "-inf.0" => {
        Object::Flonum(Flonum::new(f64:: NEG_INFINITY))
    },
    "+nan.0" => {
        Object::Flonum(Flonum::new(f64:: NAN))
    },
    "-nan.0" => {
        Object::Flonum(Flonum::new(f64:: NAN))
    },
}

Digit10: String = {
    <s:"digit"> => {
        s.to_string()
    }
}

Digit8: String = {
    <s:"oct_digit"> => {
        s.to_string()
    }
}

Digit16: String = {
    <s:"hex_digit"> => {
        s.to_string()
    }
}

extern {
    type Location = usize;
    type Error = ports::ReadError;

    enum lexer::Token {
        "-" => lexer::Token::Minus,
        "." => lexer::Token::Dot,
        "/" => lexer::Token::Slash,
        "#d" => lexer::Token::Radix10,
        "#o" => lexer::Token::Radix8,        
        "#x" => lexer::Token::Radix16,
        "#e" => lexer::Token::Exact,
        "#i" => lexer::Token::Inexact,
        "+" => lexer::Token::Plus,
        "digit" => lexer::Token::Digit { value: <String> },
        "oct_digit" => lexer::Token::OctDigit { value: <String> },        
        "hex_digit" => lexer::Token::HexDigit { value: <String> },
        "e" => lexer::Token::Exponent,
        "i" => lexer::Token::Imag,
        "+inf.0" => lexer::Token::PlusInf,
        "-inf.0" => lexer::Token::MinusInf,
        "+nan.0" => lexer::Token::PlusNan,
        "-nan.0" => lexer::Token::MinusNan,
    }
}