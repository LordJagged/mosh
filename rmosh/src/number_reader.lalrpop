use crate::objects::Object;
use crate::gc::Gc;
use crate::number_lexer;
use std::str::FromStr;
use crate::numbers::Ratnum;

grammar(gc: &mut Box<Gc>);

// R7RS small 7.1.2. External representations
pub Number: Object = {
    Ureal10,
}


Ureal10: Object = {
    <numer: "uinteger10"> "/" <denom: "uinteger10"> => {
        match (isize::from_str(&numer), isize::from_str(&denom)) {
            (Ok(n), Ok(d)) => {
                Object::Ratnum(gc.alloc(Ratnum::new(n, d)))
            }
            _ => {
                todo!();
            }
        }
    }
}

extern {
    type Location = usize;
    type Error = number_lexer::NumberLexicalError;

    enum number_lexer::Token {
        "uinteger10" => number_lexer::Token::Uinteger10 { value: <String> },
        "/" => number_lexer::Token::Slash,
    }
}