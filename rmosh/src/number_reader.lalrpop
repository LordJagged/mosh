use crate::objects::Object;
use crate::numbers::Flonum;
use crate::gc::Gc;
use crate::number_lexer;
use std::str::FromStr;
use crate::numbers::Ratnum;
use crate::numbers::Compnum;

grammar(gc: &mut Box<Gc>);

// R7RS small 7.1.2. External representations
pub Number: Object = {
    Number10,
}

Number10: Object = {
    Prefix10? <c: Complex10> => c,
}

Prefix10: bool = {
    Radix10 <e: Exactness> => e,
    <e: Exactness> Radix10 => e,
    Exactness,
}

Exactness: bool = {
    "#e" => true,
    "#i" => false,
}

Radix10 = {
    "#d"
}

Complex10: Object = {
    Real10,
    <real: Real10> "+" <imag: UReal10> "i" => {
        Object::Compnum(gc.alloc(Compnum::new(real, imag)))
    },
    <real: Real10> "-" <imag: UReal10> "i" => {
        let imag = imag.neg(gc);
        Object::Compnum(gc.alloc(Compnum::new(real, imag)))
    },    
    <real: Real10> "+" "i" => {
        Object::Compnum(gc.alloc(Compnum::new(real, Object::Fixnum(1))))
    },    
    <real: Real10> "-" "i" => {
        Object::Compnum(gc.alloc(Compnum::new(real, Object::Fixnum(-1))))
    },       
}

Real10: Object = {
    UReal10,
    "+" <ureal10: UReal10> => {
        ureal10
    },
    "-" <ureal10: UReal10> => {
        ureal10.neg(gc)
    },
    InfNan,
}

UReal10: Object = {
    UInteger10 => {
        match isize::from_str(&<>) {
            Ok(n) => {
                Object::Fixnum(n)
            }
            Err(err) => {
                todo!("ureal10 {:?}", err);
            }
        }
    },
    <numer: UInteger10> "/" <denom: UInteger10> => {
        match (isize::from_str(&numer), isize::from_str(&denom)) {
            (Ok(n), Ok(d)) => {
                Object::Ratnum(gc.alloc(Ratnum::new(n, d)))
            }
            _ => {
                todo!();
            }
        }
    },
    Decimal10 => {
        match f64::from_str(&<>) {
            Ok(n) => {
                Object::Flonum(Flonum::new(n))
            },
            Err(err) => todo!(),
        }
    }
}

Decimal10: String = {
    <uinteger10: UInteger10> <suffix: Suffix> => {
        uinteger10 + &suffix
    },
    "." <digits: "digit10" +> <suffix: Suffix ?> => {
        ".".to_owned() + &digits.join("") + &suffix.unwrap_or("".to_string())
    },
    <digits: "digit10" +> "." <digits2: "digit10" *> <suffix: Suffix ?> => {
        digits.join("") + &"." + &digits2.join("") + &suffix.unwrap_or("".to_string())
    },
}

Suffix: String = {
    "e" "+" <digits: "digit10" +> => {
        "e+".to_owned() + &digits.join("")
    },
    "e" "-" <digits: "digit10" +> => {
        "e-".to_owned() + &digits.join("")
    },
    "e" <digits: "digit10" +> => {
        "e".to_owned() + &digits.join("")
    },
}

UInteger10: String = {
    <digits: "digit10" +> => {
        digits.join("")
    }
}

InfNan: Object = {
    "+inf.0" => Object::Flonum(Flonum::new(f64:: INFINITY)),
    "-inf.0" => Object::Flonum(Flonum::new(f64:: NEG_INFINITY)),    
}

extern {
    type Location = usize;
    type Error = number_lexer::NumberLexicalError;

    enum number_lexer::Token {
        "-" => number_lexer::Token::Minus,
        "." => number_lexer::Token::Dot,
        "/" => number_lexer::Token::Slash,
        "#d" => number_lexer::Token::Radix10,            
        "#e" => number_lexer::Token::Exact,        
        "#i" => number_lexer::Token::Inexact,                
        "+" => number_lexer::Token::Plus,
        "digit10" => number_lexer::Token::Digit10 { value: <String> },
        "e" => number_lexer::Token::Exponent,        
        "i" => number_lexer::Token::Imag,
        "+inf.0" => number_lexer::Token::PlusInf,        
        "-inf.0" => number_lexer::Token::MinusInf,        
    }
}